buildscript {
    // ext라는 키워드는 build.gradle에서 사용하는 전역변수를 설정하겠다는 의미. 여기서는 springBootVersion 전역변수를 생성하고 그 값을 '2.1.7.RELEASE'로 하겠다는 의미.
    // 즉, spring-boot-gradle-plugin라는 스프링 부트 그레이들 플러그인의 '2.1.7.RELEASE'를 의존성으로 받겠다는 의미.
    ext {
        springBootVersion = '2.1.7.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

// 아래는 앞서 선언한 플러그인 의존성들을 적용할 것인지를 결정하는 코드.
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management' // 이것은 스프링 부트의 의존성들을 관리해 주는 플러그인이라 꼭 추가해줘야 함.
// 위 4개의 플러그인은 자바와 스프링 부트를 사용하기 위해서는 필수 플러그인으로, 항상 추가해주면 된다.

group 'com.ssafy.book'
version '1.0-SNAPSHOT'
sourceCompatibility = 1.8


// repositories는 각종 의존성 (라이브러리0들을 어떤 원격 저장소에서 받을지를 정함.
// 기본적으로 mavenCentral을 많이 사용하지만, 최근에는 <라이브러리 업로드 난이도> 때문에, jcenter도 많이 사용.
// mavenCentral은 이전부터 많이 사용하는 저장소지만, 본인이 만든 라이브러리를 업로드 하기 위해서는 <많은 과정과 설정>이 필요함. 업로드가 힘들어 공유가 안되는 상황이 발생.
// jcenter는 이런 문제점을 개선하여 <라이브러리 업로드를 간단>하게 하였음. 또한, 여기에 업로드를 하면 mavenCentral에도 업로드 될 수 있도록 자동화할 수 있음.
// 때문에 점점 jcenter로 이동하고 있는 추세.
repositories {
    mavenCentral()
    jcenter()
}

// dependencies 는 프로젝트 개발에 필요한 의존성들을 선언하는 곳.
dependencies {
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.projectlombok:lombok')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    /*
        spring-boot-starter-data-jpa
            - 스프링 부트용 Spring Data JPA 추상화 라이브러리.
            - 스프링 부트 버전에 맞춰 자동으로 JPA 관련 라이브러리들의 버전을 관리해 줌.
     */
    compile('com.h2database:h2')
    /*
        h2
            - 인메모리 관계형 데이터베이스
            - 별도의 설치가 필요 없이 프로젝트 의존성만으로 관리할 수 있음.
            - 메모리에서 실행되기 때문에 애플리케이션을 재시작 할 때마다 초기화된다는 점을 이용하여 테스트 용도로 많이 사용.
            - 이 책에서는 JPA의 테스트, 로컬 환경에서의 구동에서 사용할 예정.
     */
    testCompile('org.springframework.boot:spring-boot-starter-test')
}